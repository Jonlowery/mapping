-- This SQL script sets up the initial database structure for the mapping app.
-- It should be placed in the `database/` folder.

-- Step 1: Enable the PostGIS extension.
-- PostGIS adds support for geographic objects to the PostgreSQL database.
-- This is crucial for handling map coordinates and location-based queries efficiently.
CREATE EXTENSION IF NOT EXISTS postgis;

-- Step 2: Create the "Users" table.
-- This table will store login information for your sales officers.
CREATE TABLE Users (
    id SERIAL PRIMARY KEY, -- A unique, auto-incrementing ID for each user.
    name VARCHAR(255) NOT NULL, -- Corresponds to the "TIB Investments Officer" column in your file.
    email VARCHAR(255) UNIQUE NOT NULL, -- Corresponds to the "Email Address" column in your file.
    password_hash VARCHAR(255) NOT NULL, -- For secure login, will be generated by the app, not from Excel.
    role VARCHAR(50) DEFAULT 'user' -- For app permissions, will be set by the app.
);

-- Step 3: Create the "Banks" table.
-- This table will store all the information about the banks from your "Customers" file.
CREATE TABLE Banks (
    id SERIAL PRIMARY KEY, -- A unique, auto-incrementing ID for each bank.
    name VARCHAR(255) NOT NULL, -- Corresponds to "Relationship Name".
    address_line_1 VARCHAR(255), -- Corresponds to "Physical Address Line 1".
    city VARCHAR(100), -- Corresponds to "Physical City".
    state VARCHAR(100), -- Corresponds to "Physical State/Province".
    zip_code VARCHAR(20), -- Corresponds to "Physical Zip/Postal Code".
    latitude DOUBLE PRECISION, -- Will be generated by geocoding the address.
    longitude DOUBLE PRECISION -- Will be generated by geocoding the address.
);

-- Step 4: Create the "Assignments" table.
-- This is a "join table" that links users to the banks they are assigned to.
-- The data for this table will be created by matching the "TIB Investments Officer"
-- name from the Customers file to the corresponding user in the Users table.
CREATE TABLE Assignments (
    id SERIAL PRIMARY KEY, -- A unique ID for each assignment record.
    user_id INTEGER NOT NULL, -- The ID of the assigned user.
    bank_id INTEGER NOT NULL, -- The ID of the assigned bank.

    -- Define the foreign key relationships.
    -- This ensures data integrity. For example, you can't assign a user that doesn't exist.
    FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
    FOREIGN KEY (bank_id) REFERENCES Banks(id) ON DELETE CASCADE,

    -- Ensure that each user-to-bank assignment is unique.
    UNIQUE (user_id, bank_id)
);

-- Step 5: Create a spatial index.
-- This makes searching for banks within a certain geographic area (like on the map) much faster.
-- It uses the latitude and longitude columns from the Banks table.
CREATE INDEX banks_location_idx ON Banks USING GIST (ST_MakePoint(longitude, latitude));

-- --- End of Script ---
